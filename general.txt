Mann, RL meeting:

Play around with the parameters in IRI to get different Alfven wave and speed profiles, for example cordinates, different local times, different seasons, etc.

Ask Bob: What is the Q factor? High Q is low damping, comes probably from electrical engineering terminology, called the quality factor. Look up Jackson on resonant cavities.

Observations:

When the x-coordinate is 2, all Ex's are bad, with jumps of 25 or more orders of magnitude around the second or third time step. For x=4, values of Ex are decent. An oscillatory behaviour is seen with weird smaller oscillations at the crests of the sine wave. Similar intersting stuff for a tanh profile. The proximity of the z coordinate to the top boundary does not seem to make any difference, except the the jump mentioned happens a couple of time steps sooner or later for farther points.

x=6,12 are bad. 8 and 10 are fine. At the x's where the numbers seem fine, the first few time steps for some z's give extremely small values. 

For By: x=2,6,12 bad, x=4,8,10 good. Oscillatory behaviour is seen for all 'bad' fields, even though the driving function is tanh. A normal increasing profile is observed for the 'good' fields as might be expected.

All this was for the Ex and By part of the code. If all do loops are run, the numbers blow up by the 40th time step to give Nans thereafter.

Could the lack of a boundary condition in the x direction be a reason for the blow-up?

When taking the difference in x to be 1 as no derivatives in that direction for just the Alfven wave, it is found that x=2,5,6,9,12 are blowing up. This happens even when Ez is taken into account without any change in field values, regardless of whether Ez has been initialised properly or not. The remaining x coordinates values blow up when By is taken at odd coordinates and Ex at even, with Ex(:,2) initialised. However, x=8 is good for both cases.

No change even after imposing boundary conditions in the x direction like Ex(12,:)=0.

If there is a field By(13,3), this is technically undefined but is actually read as By(1,4) by Fortran. The first coordinate wraps around and adds to the second one.

Test out the code with MSI's compiler. It is possible that gfortran is allowing some other arrays to overwrite the fields ones. MSI has commands to check this.

At x=1 by printing the fields before the computing line it is seen that it is all fields are well behaved. At x=2, it is the Ex(2,3) field, the uninitialised one, which turns rogue first and thereby affects By similarly. It's a similar story with the same numbers when the write statement is after the equation.

If Ex(:,3) is initialised then the blowup vanishes for all x. FALSE! Ex(2,3) behaves well now, but Ex(2,5) blows up.

scratch.global to store files temporarily so that lots of data is not stored in our main folder. Load the .exe file, alfdip3d in RL's example is one such file. The last line only stores the .out file in the desired directory; all other output files are in the scratch.global directory.

The (omega*)*dt<1 stability condition is similar to the Courant condition. Search in Vesely (chapter 4 - 4.1.2) for the logic behind it. As the plasma frequency is very high in the ionosphere, it demands a smaller time step to resolve it, but that would violate the Courant condition. We don't care about the plasma oscillations anyway, so we artificially reduce the plasma frequency by changing the permittivity. This keeps the electron inertial length the same which preserves the physics as long as the modified plasma frequency is still much larger than the length scale of the driving pulse.

Do the following:

Plots of Va under different IGRF conditions.
Pseudodiploe geometry - B still goes as 1/r^3 and scale factors are included but without curvature. Valid in small regions near poles.
Different boundary conditions at the bottom, particularly the inductive boundary condition used by Woodroffe in 2012 and afterwards.
Poster for GEM in July. Deadline is July 1 so look that up.
Plot a height integrated pedersen cond.
Run code with By=0 and contrast with Ex=0 at z=46. The By=0 condition yields similar results as the Ex=0 at 46 condition. Both of them differ from no expicit condition but Ex taken down just to 45.

The frequency of Ex depends on Va/scale height, which is the profile used by Greifinger and Greifinger. Look at RL's previous papers for that. Through that profile it depends on the density.

Agenda 15/06: omega*time condition to set epspar takes care of blowup under new conditions; show fields near bottom boundary; what happens when an additional boundary condition is imposed at the top and discrepancy between plus and minus signs; fields with a sheet current initialisation at the top, 3 orders of magnitude weaker

Agenda 22/6: show contrasting fields with Jz and By driving; height-integrated Pedersen conductivity computed and fields computed with sheet current boundary condition at the bottom end; discuss which is the best coordinate to put this at

Agenda 29/06: composite 3/8 simpson's rule works; pedersen conductivity of 0.01 bad, 0.02 good; flux question: since we are only in 2d and field lines are vertical, there is no flux perpendicular to the xz plane; procedure outline for continuing code to higher altitudes. will it be similar for all quantities?

Agenda 07/07: va and hdens are increasing: should there be only a power law and no exponential "decrease" upon extension?; correct coefficients for power laws and units for different densities. take the extremely small ones to be zero; a grid for x-points.

Agenda: how to extrapolate electron temperature?;

Segmentation faults are ususally the result of incorrect array allocation

Agenda 20/08: courant condition works, density arrays have been cleaned up, no big jumps in speeds, fields initialise correctly at zero

Agenda 4/09: NaN issue persists when Ez and Jz are removed; ex2=rva1*by2 until 1.35 secs, then start diverging with an order of magnitude change in rva1*by2 (makes sense because that condition is true only for a purely propagating wave, under reflections and a bounce-back from teh ionosphere it will change); running with different boundary conditions and in MSI gets it working till 6.9 secs

Tasks: instead of printing it out in one file, split it up into different files; as amount of data builds up, start printing out only max and min values (during meeting next week); plot out coefficients to find out large discontinuities if they exist

Agenda 07/09: inquire about how to add aliases in putty(no point because putty doesn't know anything about my file system, it only takes care of the files hosted on the msi servers); agu receipts

Agenda 08/09: removing the pedersen conductivity works, problem should be with the coefficient bb1; show plots created at 734

Tasks: problem probably with the calculation of the pedersen conductivity, as values shouldn't be more that about 10-4 mho/m. fiddle around with the formula to get that right.

Agenda 10/09: sigped1 problem fixed by using the proper densities in the formula. initial formula had then in percentages but in the extended code that changed to the bare numbers. this got the alfven part running. NaNs still cropped up in the full code, so modified the extension of the electron-ion collision frequency but still getting NaNs after 6.55s; ask how to get multiple columns printed properly through msi

Tasks: (*) format is giving garbage for more than two columns so use fmt=..12.5 or something like that; print out all fields to see which one goes rogue first, dig deeper into the coefficients

Agenda 14/09: changed extension of pedersen conductivity to smoothen out transition to zero beyond 1000 km. this didn't change anything with regards to the NaNs.

Agenda 15/09: changed extensions of oxygen and nitrogen densities to power laws from exponential. the loops ran for around 30 secs and then started giving NaNs.

Agenda 16/09: make the time step smaller; plot out fields until they go bad to see if there are weird things happening; bob will send a routine to tell ifort to perform deeper checks of the code for errors

Agenda 17/09: -check all command added to ifort script but no change in field behaviour. the NaNs started appearing 5 seconds earlier.

Tasks: reduce time step; reduce gap between printed times, put a condition that prints out field values only after 20-30 secs or so

Agenda 20/09: Same NaN type behaviour even after halving and quartering the time step to 2E-4s. Fields go rogue at the same time; discuss orals committee. formation and dates; are the results physically valid until the time it blows up?; show speed1 and alpha1 zoomed; about 14s for the wave to cross 19000km based on highest wave speed; after removing the Jz and Ez parts, code runs properly for as long as 100s (with reduced time step too)

Note: alpha1 and sigped1 profiles have been changed from directly following the densities and frequencies to having power law fall-offs on their own

Update 20/09: in business till at least 100s. problem was with not taking the reversed parallel conductivity in the coefficients for the z-direction. that was probably causing issues.

Tasks: run the code for the extreme conditions mentioned by Ian Mann and compare results; upload all results to github to avoid confusion later on; learn a proper plotting method like python or julia or whatever else to avoid mucking about on gnuplot or excel anymore

Agenda 23/09: all fields printed out at intervals in x and z for 24/08/09. now on to 25/12/19.

Update 24/09: all printed similarly for 25/12/19.

Agenda 27/09: discuss orals stuff with Bob; further tasks to be done with the code

jorge officially assigns the committee. john, lindsay, cindy, tom jones from "outside" are candidates.

fft is pretty simple in both IDL and python. do it to see which frequencies the resonant cavity favours. we are working at 1 Hz so expect to see that amplified.
Due to the skin depth effect caused by the Pedersen conductivity, the wave can be expected to attenuate as it goes down the ionosphere. Plot and verify this.
Once the frequencites have been found, drive the pulse with that frequency as a retest that the cavity indeed amplifies those instead of others.
Drive the cavity with a pulse as mentioned in a comment on the code.

Agenda 30/09: ask bob about opening flies using a loop as opposed to writing a hundred lines

Agenda 04/10: work on fft; set up loop for problem addressed on 30/09; send out emails for setting up orals

Tasks: look at magnitudes of the fft instead of real and imaginary parts; do a cross-correlation between ex and by to see for how long they are in or our of phase; plot ex and va*by vs time in one plot; look at 2013 paper
we want to see the frequency at which the fft is of the maximum value. these are the frequencies favoured by the wave. so scale the axes properly, or do a log plot, to see what this frequency is.

Tasks 05/10: the fft signal is peaking at zero frequency (with a mysterious blank region for small negative frequencies) even for fields deep inside the ionosphere, probably due to the tanh driving. 
plot for more field locations and then drive with a cosine pulse to see if the peaking frequency changes.

Tasks 06/10: print only the positive frequencies of the fft, because for a real function, the fourier transform of the negative arguments is equal to the ft of the complex conjugate of the positive arguments. we are taking the absolute values anyway so it doesn't matter.
the horizontal like at the bottom of the fft is puzzling to bob too

Agenda 11/10: using np.fft.fftshift the horizontal line was removed. it connected the first and last data points of the set. it plots the positive frequencies first and then the negative ones. fftshift plots data in its natural order

after plotting just the positive frequency values of the ft, is it seen that the peak is at 1, something that was not clear in the previous full plots. there is some empty space after zero, then the plot begins.

however, upon zooming into the previous plots, it is seen that the peak is at zero

where is the actual peak? at Zero only. i was initially setting frequencies to be strictly positive. for a non-negative constraint it's the same as before.

peaking at zero again after driving with a cosine pules for one time period of 1 Hz.
for (2,100) ex, by and ez go through a half-time period wave, i.e., one crest, with ez roughly negative of both ex and by. only jz goes through one full wave.
test this for fields in the ionospheric region to see if the fft is qualitatively different.

Tasks: run fft at different locations to look for nodes and antinodes of fields (when the ocnductivity is high, E is zero and so there's a node for E and an antinode for B, but when the conductivity is low, current can't flow and so B is zero, giving an antinode for E); drive the outer loop for longer to see effects; time derivative of j is proportional to e, so half wave for e and full wave for j makes sense

Agenda 15/10: frequency vs angular frequency while driving and how to make sene of the output frequency bins. 
Bob uses frequency, so (2*pi*t) as that's the standard way most people do it.

Agenda 16/10: majmu008 not added to sudoers file in putty. fine for vim because i added my own vimrc file and changed some settings but it looks like I need it for an x11 forwarding error while running python codes on msi.

Agenda 18/10: x11 forwarding error resolved through Joe's help. used mpl.use('agg'). agg is a backend (https://gist.github.com/CMCDragonkai/4e9464d9f32f5893d837f3de2c43daa4) which is not required in Jupyter notebooks but is used when interfacing between linux and windows, especially when rendering pngs.

Lucas notes: paraview for 3d printing. refactorise code as much as possible (make it modular, write functions to avoid writing many similar lines), hdf5 might be too complicated for now in fortran so might look at it for python. write file unit numbers and other identifiers to arrays and use them in nested for loops to open and close files.